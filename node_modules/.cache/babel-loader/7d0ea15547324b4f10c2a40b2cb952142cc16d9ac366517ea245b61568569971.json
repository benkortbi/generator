{"ast":null,"code":"var _jsxFileName = \"/storage/emulated/0/Meme/src/components/Figure.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Container from './../Ui/Container.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Figure = props => {\n  _s();\n  const [meme, setMeme] = useState(null);\n  const [imgSrc, setImgSrc] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://api.imgflip.com/get_memes');\n        const memesCollection = await response.json();\n        setMeme(memesCollection);\n        for (let i = 0; i < meme.data.memes.length; i++) {\n          const randomUrl = Math.floor(Math.random() * i);\n          setImgSrc(meme.data.memes[randomUrl].url);\n        }\n      } catch (e) {\n        alert(e);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"figure--section w-full h-full\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: meme ? /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"w-full h-34 px-2 relative mx-auto mt-14 relative text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"meme--text absolute -translate-x-1/2 text-4xl text-white font-bold top-5\",\n          children: props.Toptxt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"meme--text absolute -translate-x-1/2 text-4xl text-white font-bold bottom-5\",\n          children: props.Bottomtxt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \" w-full h-full object-cover rounded-md\",\n          src: imgSrc,\n          Loading: \"lazy\",\n          alt: \"meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Figure, \"SgcldS3e4qjYKsRfOq7qVacdbbI=\");\n_c = Figure;\nexport default Figure;\nvar _c;\n$RefreshReg$(_c, \"Figure\");","map":{"version":3,"names":["useState","useEffect","Container","Figure","props","meme","setMeme","imgSrc","setImgSrc","fetchData","response","fetch","memesCollection","json","i","data","memes","length","randomUrl","Math","floor","random","url","e","alert","Toptxt","Bottomtxt"],"sources":["/storage/emulated/0/Meme/src/components/Figure.jsx"],"sourcesContent":["import { useState,useEffect } from 'react'\nimport Container from './../Ui/Container.jsx'\nconst Figure = (props) => {\n  const [meme, setMeme] = useState(null)\n  const [imgSrc, setImgSrc] = useState(null)\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try{\n        const response = await fetch('https://api.imgflip.com/get_memes')\n      const memesCollection = await response.json();\n      setMeme(memesCollection)\n      for(let i = 0; i < meme.data.memes.length;i++){\n        const randomUrl = Math.floor(Math.random() * i);\n        setImgSrc(meme.data.memes[randomUrl].url)\n      }\n      }catch(e) {\n        alert(e)\n      }\n    }\n    fetchData()\n  }, [])\n  return(\n    <div className='figure--section w-full h-full'>\n    <Container>\n    {meme ? <figure className='w-full h-34 px-2 relative mx-auto mt-14 relative text-center'>\n     <span className='meme--text absolute -translate-x-1/2 text-4xl text-white font-bold top-5'>\n    {props.Toptxt}\n    </span>\n     <span className='meme--text absolute -translate-x-1/2 text-4xl text-white font-bold bottom-5'>\n    {props.Bottomtxt}\n    </span>\n    <img className=' w-full h-full object-cover rounded-md' src={imgSrc} Loading=\"lazy\" alt='meme'/>\n    </figure> : <span>Loading</span> }\n    </Container>\n    </div>\n    )\n}\nexport default Figure;"],"mappings":";;AAAA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAOC,SAAS,MAAM,uBAAuB;AAAA;AAC7C,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,YAAY;MAC5B,IAAG;QACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QACnE,MAAMC,eAAe,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QAC7CP,OAAO,CAACM,eAAe,CAAC;QACxB,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACU,IAAI,CAACC,KAAK,CAACC,MAAM,EAACH,CAAC,EAAE,EAAC;UAC5C,MAAMI,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGP,CAAC,CAAC;UAC/CN,SAAS,CAACH,IAAI,CAACU,IAAI,CAACC,KAAK,CAACE,SAAS,CAAC,CAACI,GAAG,CAAC;QAC3C;MACA,CAAC,QAAMC,CAAC,EAAE;QACRC,KAAK,CAACD,CAAC,CAAC;MACV;IACF,CAAC;IACDd,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EACN,oBACE;IAAK,SAAS,EAAC,+BAA+B;IAAA,uBAC9C,QAAC,SAAS;MAAA,UACTJ,IAAI,gBAAG;QAAQ,SAAS,EAAC,8DAA8D;QAAA,wBACvF;UAAM,SAAS,EAAC,0EAA0E;UAAA,UAC1FD,KAAK,CAACqB;QAAM;UAAA;UAAA;UAAA;QAAA,QACN,eACN;UAAM,SAAS,EAAC,6EAA6E;UAAA,UAC7FrB,KAAK,CAACsB;QAAS;UAAA;UAAA;UAAA;QAAA,QACT,eACP;UAAK,SAAS,EAAC,wCAAwC;UAAC,GAAG,EAAEnB,MAAO;UAAC,OAAO,EAAC,MAAM;UAAC,GAAG,EAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QACvF,gBAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAoB;MAAA;MAAA;MAAA;IAAA;EACpB;IAAA;IAAA;IAAA;EAAA,QACN;AAEV,CAAC;AAAA,GAnCKJ,MAAM;AAAA,KAANA,MAAM;AAoCZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}